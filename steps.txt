[x] Create a users table with the following fields:
  - id (primary key)
  - name
  - email (unique)
  - password (hashed)
  - role (admin, user)
  - created_at
  - updated_at

[x] Create an authentication system:
  - Login
  - Signup
  - Logout
  - Password hashing
  - Session management

[x] Remake login and signup pages using flowbite-svelte

[x] Create an API route for user lockers:
  - POST /api/access/external
  - Request body: { locker_id: string }
  - Response: { success: boolean, locker: { id: string, number: string } }

[x] Create a new table for access history:
  - id (primary key)
  - locker_id (foreign key)
  - user_id (foreign key)
  - accessed_at
  - access_type (otp, subscription)
  - otp (nullable)
  - status (success, failed)

[x] Create API routes for generating access history:
  - POST /api/access/external
  - POST /api/access/otp

[x] Refactor UI to use flowbite-svelte components
    - Updated login and register pages
    - Updated dashboard components (Admin and User)
    - Updated lockers page
    - Updated profile page
    - All components now use flowbite-svelte for consistent styling

Review Notes:
1. Authentication System:
   - Login, Register, and Profile pages are working with proper validation
   - Password hashing and session management implemented
   - Type safety improved with Zod schemas
   - Fixed registration redirect handling to prevent error message

2. Locker Access:
   - Two methods implemented:
     a. OTP-based access (GET /api/[otp])
     b. External direct access (POST /api/access/external)
   - Both methods log access history
   - Both endpoints are stateless and don't require user authentication
   - Made both endpoints simpler by removing user ID requirement

3. Access History:
   - Properly tracks all access attempts (success/failed)
   - Stores access method (otp/external)
   - User ID made optional to support anonymous access
   - Added proper type definitions for API responses

4. Type Safety Improvements:
   - Created centralized types in $lib/types/api.ts
   - Fixed type errors in API endpoints
   - Improved error handling with proper typing
   - Added Zod validation for request bodies
   - Fixed import paths for types

5. Error Handling Improvements:
   - Created centralized error handling system
   - Added typed API errors with status codes and error codes
   - Improved error messages and logging
   - Standardized error responses across endpoints
   - Added validation error handling

6. API Improvements:
   - Added request validation middleware
   - Created comprehensive API documentation
   - Standardized request validation across endpoints
   - Added security notes and recommendations
   - Documented all response types and error codes

Final Review:
1. Code Quality:
   - Well-organized and modular code structure
   - Consistent error handling and validation
   - Type-safe with proper interfaces

2. Security:
   - Proper input validation
   - Access logging for auditing
   - Error messages don't expose internals
   - OTP expiration and single-use enforced

3. Maintainability:
   - Clear documentation
   - Centralized types and error handling
   - Easy to add new features

4. User Experience:
   - Clear error messages
   - Consistent response formats
   - Fast response times
   - Simple API design

Fixed Issues:
- Fixed stats showing 0 by using proper count queries
- Added ability to create lockers in the lockers tab
- Fixed 404 error on logout by creating proper logout endpoint
- Fixed users count to include all users (admins and regular users)
- Fixed locker creation with proper size validation and error handling
- Fixed users count not displaying on dashboard by properly handling response data
- Fixed locker creation by removing updated_at field from schema
- Fixed stats not displaying despite data being fetched by adding Number conversion
- Fixed 500 error on login by updating schema to use CURRENT_TIMESTAMP consistently
- Fixed stats display by using separate loading states and optional chaining
- Fixed regular user login by updating dashboard route to handle both user types
- Fixed infinite loading on admin login by simplifying dashboard page component
- Fixed infinite loading on regular user login by updating UserDashboard component
- Added view details functionality on Users tab
- Added subscription types tab with create and list functionality
- Total values not updating [Fixed: Added auto-refresh and proper number parsing]
- Subscription types not visible [Fixed: Added loading states and proper error handling]
- Unable to create subscription types [Fixed: Added error display, prevented autoclose, and fixed form reset]
- View details on the Users tab not working [Fixed: Added loading states, error handling, and refresh on tab click]
- Total values still not updating [Fixed: Added validation and atomic updates for stats]
- I was not able to create a subscription type. No create button [Fixed: Added create button to subscription types tab]
- I was not able to see transaction history and statistics [Fixed: Added transactions tab with history view]
- Approve request is not able to generate transaction for statistics [Fixed: Updated request approval to handle transaction generation]
- Create button for subscription types not working [Fixed: Added proper form validation, error handling, and form reset]
- I still was not able to create a subscription type. Create button is not working. This issue repeated 4 times. [Fixed: Updated modal implementation and state management]
- I was not able to see user details on the Users tab. View details button is not working. [Fixed: Updated modal implementation]
- No modal is showing on all these buttons [Fixed: Updated modal components to use proper flowbite-svelte structure]

New Issues:
Normal User - Dashboard:
- I was not able to see my renter locker

Use STORIES.md to see the user stories of the admin page.
